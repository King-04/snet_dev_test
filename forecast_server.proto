syntax = "proto3";

package forecast;

// Corresponds to TimeSeriesData model
message TimeSeriesData {
    repeated string dates = 1;  // Maps to dates: List[str]
    repeated double values = 2; // Maps to values: List[float]
}

// Corresponds to ProphetParameters model
message ProphetParameters {
    // Core Parameters
    double changepoint_prior_scale = 1;  // Maps to changepoint_prior_scale with default 0.05
    double seasonality_prior_scale = 2;  // Maps to seasonality_prior_scale with default 10.0
    double holidays_prior_scale = 3;     // Maps to holidays_prior_scale with default 10.0
    string seasonality_mode = 4;         // Maps to seasonality_mode (additive/multiplicative)

    // Seasonality Parameters
    optional bool yearly_seasonality = 5;  // Maps to yearly_seasonality
    optional bool weekly_seasonality = 6;  // Maps to weekly_seasonality
    optional bool daily_seasonality = 7;   // Maps to daily_seasonality

    // Growth Parameters
    string growth = 8;              // Maps to growth (linear/logistic/flat)
    optional double cap = 9;        // Maps to cap for logistic growth
    optional double floor = 10;     // Maps to floor for logistic growth

    // Changepoint Parameters
    int32 n_changepoints = 11;      // Maps to n_changepoints with default 25
    double changepoint_range = 12;  // Maps to changepoint_range with default 0.8
}

// Corresponds to ForecastRequest model
message ForecastRequest {
    TimeSeriesData data = 1;                    // Maps to data: TimeSeriesData
    int32 periods = 2;                          // Maps to periods: int
    optional ProphetParameters model_parameters = 3;  // Maps to model_parameters: Optional[ProphetParameters]
    bool return_components = 4;                 // Maps to return_components: bool
}

// Corresponds to components in ForecastResponse
message ForecastComponents {
    repeated double trend = 1;   // Maps to components['trend']
    repeated double yearly = 2;  // Maps to components['yearly']
    repeated double weekly = 3;  // Maps to components['weekly']
    repeated double daily = 4;   // Maps to components['daily']
}

// Corresponds to ForecastResponse model
message ForecastResponse {
    repeated string forecast_dates = 1;      // Maps to forecast_dates: List[str]
    repeated double forecast_values = 2;     // Maps to forecast_values: List[float]
    repeated double forecast_lower_bound = 3; // Maps to forecast_lower_bound: List[float]
    repeated double forecast_upper_bound = 4; // Maps to forecast_upper_bound: List[float]
    optional ForecastComponents components = 5; // Maps to components: Optional[Dict[str, List[float]]]
}

// Service definition
service ForecastService {
    // Maps to POST /forecast/
    rpc CreateForecast(ForecastRequest) returns (ForecastResponse) {}

    // Maps to GET /parameters/default
    rpc GetDefaultParameters(Empty) returns (ProphetParameters) {}
}

// Empty message for requests that don't need parameters
message Empty {}